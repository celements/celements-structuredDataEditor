<!-- SelectTagAutocompleteView -->
## tries to render option-tags from XWiki ListClass
## NOTE we cannot simply use XWiki's displayEdit here because it also renders the select-tag around it
#set($cellDocRef = $celldoc.getDocumentReference())
#set($supportedClasses = ['ListClass','StaticListClass','DBListClass','DBTreeListClass','UsersClass','GroupsClass','LevelsClass'])
#set($supportedDisplayTypes = ['select'])
#set($autoCompleteImpl = $services.structuredDataEditor.getSelectTagAutoCompleteImpl($cellDocRef))
#set($propClass = $services.structuredDataEditor.getCellPropertyClass($cellDocRef))
#if($autoCompleteImpl.isPresent())
  #set($autoComplete = $autoCompleteImpl.get())
  #set($currentDocRefValue = $autoComplete.getSelectedValue($cellDocRef))
  #if($currentDocRefValue.isPresent())
    #set($jsonBuilder = $!autoComplete.getJsonForValue($!currentDocRefValue.get()))
    <option selected="selected" data-cel-selected-json="$escapetool.html($jsonBuilder.getJSON())"##
 value="$services.model.serialize($!currentDocRefValue.get(), 'default')"></option>
  #else
  <!-- currentDocRefValue is empty!! -->
  #end
#else
  #set($renderedContent = $services.celementsweb.renderDocument($cellDocRef))
  #if("$!renderedContent" != '')
    $renderedContent
  #elseif(!$propClass.isPresent())
    <!-- WARN SelectTagutocompleteView: no edit field defined on cell: $!celldoc -->
  #elseif(!$supportedClasses.contains($propClass.get().getType()))
    <!-- WARN SelectTagAutocompleteView: doesn't support edit field class: $!propClass.get().getType() -->
  #elseif(!$supportedDisplayTypes.contains($propClass.get().getProperty('displayType').getValue()))
    <!-- WARN SelectTagAutocompleteView: doesn't support display type: $!propClass.get().getProperty('displayType').getValue() -->
  #end
#end